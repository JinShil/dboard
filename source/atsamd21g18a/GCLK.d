module atsamd21g18a.gclk;

import mvf.mmio;

/*****************************************************************************
 Generic Clock Generator
*/
final abstract class GCLK : Peripheral!(0x40000C00)
{
    /*************************************************************************
     Control
    */
    final abstract class CTRL : Register!(00)
    {
        /*********************************************************************
         Software Reset
        */
        alias SWRST = Bit!(0, Mutability.rw);
    }

    /*************************************************************************
     Status
    */
    final abstract class STATUS : Register!(0x1)
    {
        /*********************************************************************
         Synchronization Busy Status
        */
        alias SYNCBUSY = Bit!(7, Mutability.r);
    }

    /*************************************************************************
     Generic Clock Control
    */
    final abstract class CLKCTRL : Register!(0x2)
    {
        /*****************************************************************
         ID's possible values
        */
        enum IDValues
        {
            /*************************************************************
             DFLL48
            */
            DFLL48 = 0x0,

            /*************************************************************
             FDPLL
            */
            FDPLL = 0x1,

            /*************************************************************
             FDPLL32K
            */
            FDPLL32K = 0x2,

            /*************************************************************
             WDT
            */
            WDT = 0x3,

            /*************************************************************
             RTC
            */
            RTC = 0x4,

            /*************************************************************
             EIC
            */
            EIC = 0x5,

            /*************************************************************
             USB
            */
            USB = 0x6,

            /*************************************************************
             EVSYS_0
            */
            EVSYS_0 = 0x7,

            /*************************************************************
             EVSYS_1
            */
            EVSYS_1 = 0x8,

            /*************************************************************
             EVSYS_2
            */
            EVSYS_2 = 0x9,

            /*************************************************************
             EVSYS_3
            */
            EVSYS_3 = 0xa,

            /*************************************************************
             EVSYS_4
            */
            EVSYS_4 = 0xb,

            /*************************************************************
             EVSYS_5
            */
            EVSYS_5 = 0xc,

            /*************************************************************
             EVSYS_6
            */
            EVSYS_6 = 0xd,

            /*************************************************************
             EVSYS_7
            */
            EVSYS_7 = 0xe,

            /*************************************************************
             EVSYS_8
            */
            EVSYS_8 = 0xf,

            /*************************************************************
             EVSYS_9
            */
            EVSYS_9 = 0x10,

            /*************************************************************
             EVSYS_10
            */
            EVSYS_10 = 0x11,

            /*************************************************************
             EVSYS_11
            */
            EVSYS_11 = 0x12,

            /*************************************************************
             SERCOMX_SLOW
            */
            SERCOMX_SLOW = 0x13,

            /*************************************************************
             SERCOM0_CORE
            */
            SERCOM0_CORE = 0x14,

            /*************************************************************
             SERCOM1_CORE
            */
            SERCOM1_CORE = 0x15,

            /*************************************************************
             SERCOM2_CORE
            */
            SERCOM2_CORE = 0x16,

            /*************************************************************
             SERCOM3_CORE
            */
            SERCOM3_CORE = 0x17,

            /*************************************************************
             SERCOM4_CORE
            */
            SERCOM4_CORE = 0x18,

            /*************************************************************
             SERCOM5_CORE
            */
            SERCOM5_CORE = 0x19,

            /*************************************************************
             TCC0_TCC1
            */
            TCC0_TCC1 = 0x1a,

            /*************************************************************
             TCC2_TC3
            */
            TCC2_TC3 = 0x1b,

            /*************************************************************
             TC4_TC5
            */
            TC4_TC5 = 0x1c,

            /*************************************************************
             TC6_TC7
            */
            TC6_TC7 = 0x1d,

            /*************************************************************
             ADC
            */
            ADC = 0x1e,

            /*************************************************************
             AC_DIG
            */
            AC_DIG = 0x1f,

            /*************************************************************
             AC_ANA
            */
            AC_ANA = 0x20,

            /*************************************************************
             DAC
            */
            DAC = 0x21,

            /*************************************************************
             I2S_0
            */
            I2S_0 = 0x23,

            /*************************************************************
             I2S_1
            */
            I2S_1 = 0x24,
        }

        /*********************************************************************
         Generic Clock Selection ID
        */
        alias ID = BitField!(5, 0, Mutability.rw, IDValues);

        /*****************************************************************
         GEN's possible values
        */
        enum GENValues
        {
            /*************************************************************
             Generic clock generator 0
            */
            GCLK0 = 0x0,

            /*************************************************************
             Generic clock generator 1
            */
            GCLK1 = 0x1,

            /*************************************************************
             Generic clock generator 2
            */
            GCLK2 = 0x2,

            /*************************************************************
             Generic clock generator 3
            */
            GCLK3 = 0x3,

            /*************************************************************
             Generic clock generator 4
            */
            GCLK4 = 0x4,

            /*************************************************************
             Generic clock generator 5
            */
            GCLK5 = 0x5,

            /*************************************************************
             Generic clock generator 6
            */
            GCLK6 = 0x6,

            /*************************************************************
             Generic clock generator 7
            */
            GCLK7 = 0x7,
        }

        /*********************************************************************
         Generic Clock Generator
        */
        alias GEN = BitField!(11, 8, Mutability.rw, GENValues);

        /*********************************************************************
         Clock Enable
        */
        alias CLKEN = Bit!(14, Mutability.rw);

        /*********************************************************************
         Write Lock
        */
        alias WRTLOCK = Bit!(15, Mutability.rw);
    }

    /*************************************************************************
     Generic Clock Generator Control
    */
    final abstract class GENCTRL : Register!(0x4)
    {
        /*********************************************************************
         Generic Clock Generator Selection
        */
        alias ID = BitField!(3, 0, Mutability.rw);

        /*****************************************************************
         SRC's possible values
        */
        enum SRCValues
        {
            /*************************************************************
             XOSC oscillator output
            */
            XOSC = 0x0,

            /*************************************************************
             Generator input pad
            */
            GCLKIN = 0x1,

            /*************************************************************
             Generic clock generator 1 output
            */
            GCLKGEN1 = 0x2,

            /*************************************************************
             OSCULP32K oscillator output
            */
            OSCULP32K = 0x3,

            /*************************************************************
             OSC32K oscillator output
            */
            OSC32K = 0x4,

            /*************************************************************
             XOSC32K oscillator output
            */
            XOSC32K = 0x5,

            /*************************************************************
             OSC8M oscillator output
            */
            OSC8M = 0x6,

            /*************************************************************
             DFLL48M output
            */
            DFLL48M = 0x7,

            /*************************************************************
             FDPLL output
            */
            FDPLL = 0x8,
        }

        /*********************************************************************
         Source Select
        */
        alias SRC = BitField!(12, 8, Mutability.rw, SRCValues);

        /*********************************************************************
         Generic Clock Generator Enable
        */
        alias GENEN = Bit!(16, Mutability.rw);

        /*********************************************************************
         Improve Duty Cycle
        */
        alias IDC = Bit!(17, Mutability.rw);

        /*********************************************************************
         Output Off Value
        */
        alias OOV = Bit!(18, Mutability.rw);

        /*********************************************************************
         Output Enable
        */
        alias OE = Bit!(19, Mutability.rw);

        /*********************************************************************
         Divide Selection
        */
        alias DIVSEL = Bit!(20, Mutability.rw);

        /*********************************************************************
         Run in Standby
        */
        alias RUNSTDBY = Bit!(21, Mutability.rw);
    }

    /*************************************************************************
     Generic Clock Generator Division
    */
    final abstract class GENDIV : Register!(0x8)
    {
        /*********************************************************************
         Generic Clock Generator Selection
        */
        alias ID = BitField!(3, 0, Mutability.rw);

        /*********************************************************************
         Division Factor
        */
        alias DIV = BitField!(23, 8, Mutability.rw);
    }
}
